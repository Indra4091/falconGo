package ntt

import (
	"math/rand"
	"reflect"
	"testing"
	"time"
)

func TestSplitNTT(t *testing.T) {
	sNTT := []int16{3939, 2677, 11200, 4209, 2466, 6959, 1240, 7371, 6986, 12239, 6519, 6395, 4602, 1017, 3321, 11933, 1661, 7775, 11622, 3326, 11465, 2982, 10302, 7820, 4577, 8576, 4596, 11808, 253, 11731, 4487, 10346, 7645, 4006, 1759, 5191, 6694, 549, 10455, 284, 254, 10980, 8351, 1635, 11850, 639, 4590, 930, 4487, 8469, 6684, 4109, 11974, 8727, 12166, 5650, 488, 1526, 10017, 8232, 9372, 8745, 8328, 7200}
	want := [][]int16{
		{3308, 1560, 10857, 10450, 3468, 6457, 8954, 7627, 4718, 7474, 1079, 9061, 432, 8202, 5992, 1272, 11970, 3475, 9766, 11514, 5617, 4993, 100, 2760, 6478, 11541, 4206, 8908, 1007, 2980, 2914, 7764},
		{8861, 10812, 7909, 11265, 7898, 2254, 10036, 154, 6942, 4243, 2201, 2253, 5835, 1135, 10773, 6278, 2452, 8149, 8454, 10927, 3395, 3103, 5255, 11527, 8497, 3563, 6143, 1982, 9043, 8927, 2812, 7063},
	}
	got := SplitNTT(sNTT)
	if !reflect.DeepEqual(got, want) {
		t.Errorf("SplitNTT() = %v, want %v", got, want)
	}
}

func TestMergeNTT(t *testing.T) {
	mNTT := [][]int16{
		{8004, 7347, 7803, 11039, 26, 2625, 1462, 10986},
		{3839, 4177, 7889, 1851, 793, 2711, 1108, 2226},
	}
	want := []int16{10452, 5556, 6803, 7891, 6125, 9481, 1686, 8103, 2815, 9526, 245, 5005, 570, 2354, 5940, 3743}
	got := MergeNTT(mNTT)
	if !reflect.DeepEqual(got, want) {
		t.Errorf("MergeNTT() = %v, want %v", got, want)
	}
}

func TestNTT(t *testing.T) {
	fNTT := []int16{6, 16, 18, 2, 1, -12, 0, -8, -5, 4, -7, 4, -3, -16, 5, -2, -4, 8, -2, 13, 3, 7, -1, 23, -5, -1, 3, 5, 15, -11, -14, 3, 5, 3, 22, 7, -5, 8, -13, 7, 29, -8, -5, 5, -13, -4, 5, -10, 8, 12, -4, -12, -6, -14, -10, -1, 3, 18, 5, -18, -3, -22, 4, -1}
	want := []int16{7240, 2879, 8083, 3554, 9076, 6551, 11595, 506, 3194, 1371, 2545, 3517, 149, 11448, 10518, 3558, 11894, 1662, 7035, 9177, 11143, 1313, 7889, 2734, 8844, 1685, 4852, 11078, 1723, 6222, 11345, 3296, 4428, 1204, 9419, 9817, 6393, 1683, 678, 384, 1703, 5192, 10902, 183, 3426, 8843, 5381, 9857, 8744, 4422, 2109, 4983, 1138, 4022, 9749, 7982, 10322, 9819, 3417, 1566, 5303, 626, 8611, 6783}
	got := NTT(fNTT)
	if !reflect.DeepEqual(got, want) {
		t.Errorf("NTT() = %v, want %v", got, want)
	}
}

func TestINTT(t *testing.T) {
	fINTT := []int16{2332, 7409, 12005, 7250, 3227, 335, 6435, 10147, 5857, 1252, 4420, 1366, 6800, 4521, 6249, 7884, 486, 5823, 8168, 4353, 2331, 606, 11510, 10802, 8834, 2624, 4785, 11609, 5315, 6218, 11704, 5780, 4068, 581, 6656, 9799, 7516, 2616, 9354, 12101, 3893, 113, 8307, 5039, 8472, 1648, 8264, 8033, 4618, 3081, 2246, 2325, 11645, 2835, 7075, 10465, 8398, 2511, 1553, 362, 12013, 6985, 7244, 7124, 3110, 5896, 4146, 11144, 6186, 5565, 4419, 6123, 1575, 1775, 3903, 3151, 10879, 5134, 860, 4667, 5915, 7740, 10494, 10935, 11918, 4047, 7387, 8973, 8654, 8057, 7059, 5539, 8767, 3671, 2254, 6545, 11984, 7, 1641, 5519, 10601, 9439, 1749, 11401, 5390, 793, 4626, 9418, 4979, 3738, 8228, 10324, 8014, 8319, 584, 583, 1736, 10682, 10684, 530, 3002, 7313, 9630, 2357, 10695, 9310, 7745, 5382, 417, 1426, 2356, 9332, 3245, 5500, 4510, 2648, 9442, 7690, 6559, 984, 7566, 2342, 8802, 11252, 10476, 6535, 8599, 268, 2362, 2373, 8488, 2329, 10413, 4880, 5039, 7648, 9604, 1237, 2383, 2398, 10719, 8010, 985, 6232, 10384, 9488, 3010, 8371, 2992, 2838, 2568, 6089, 4600, 11970, 334, 4133, 11444, 4887, 4530, 7615, 11875, 3993, 944, 8802, 10221, 2384, 3174, 11732, 10949, 2679, 8691, 8469, 11379, 4700, 1035, 10840, 10121, 9484, 10405, 6795, 3406, 11328, 8538, 10221, 7310, 1741, 3528, 9549, 5210, 4953, 1005, 5302, 6056, 2565, 4741, 2354, 6264, 2408, 5961, 12156, 12162, 4565, 7757, 3714, 329, 2267, 6076, 9150, 4519, 6762, 2604, 6084, 6470, 1644, 11914, 2562, 7820, 5608, 8416, 2146, 4485, 422, 8735, 9540, 7041, 8895, 11594, 12012, 88, 10922, 4695, 3147, 1299, 3530, 3331, 4218, 11091, 11010, 728, 6884, 11563, 11031, 4824, 5723, 8508, 10062, 12106, 6397, 11630, 11141, 4943, 7872, 7683, 11051, 11946, 8831, 6308, 8078, 8852, 11311, 9907, 3175, 8133, 8021, 11536, 6802, 11823, 1337, 4888, 9659, 3863, 5047, 7862, 3902, 10135, 3908, 11106, 4276, 5351, 7397, 8130, 1088, 2872, 10111, 8123, 12170, 3645, 11534, 9015, 8625, 1932, 5593, 10834, 1512, 301, 10799, 3032, 934, 3194, 9373, 10500, 3620, 9601, 8955, 3237, 3173, 4347, 3382, 3678, 5858, 9442, 9243, 4009, 2118, 2404, 11083, 10062, 5441, 5251, 11287, 9604, 2246, 7680, 1105, 5048, 7090, 4683, 6654, 531, 3569, 6575, 9283, 7876, 5908, 4364, 8359, 12237, 4427, 10531, 2707, 5105, 2248, 1337, 8549, 8339, 11000, 5506, 9445, 443, 9182, 8820, 4880, 2264, 205, 7832, 11195, 9884, 3354, 9738, 7436, 11928, 1551, 9912, 6056, 8818, 690, 580, 4519, 10698, 8477, 4529, 4744, 6781, 4621, 3805, 4337, 1102, 8944, 10526, 169, 1544, 9827, 9694, 6102, 4841, 1373, 8197, 8169, 11986, 7546, 3245, 876, 5959, 9157, 404, 10632, 4004, 8151, 5660, 837, 3624, 2138, 1052, 10001, 1253, 11, 3527, 9714, 10429, 11538, 5860, 2397, 5041, 7875, 5337, 4929, 11723, 7805, 7121, 9507, 7515, 7539, 11606, 11462, 2254, 3589, 3020, 2909, 6753, 5650, 2419, 5059, 864, 1690, 8062, 3893, 7748, 8396, 10408, 1387, 11891, 3615, 5153, 8865, 9590, 570, 2335, 8274, 9503, 12267, 933, 5483, 11923, 9821, 2874, 6737, 3332, 1470, 7329, 6314, 10586, 10921, 10991, 6309, 10161, 4306, 118, 6027, 3117, 10205, 9503, 1799, 5822, 2937, 12238, 8194, 437, 2020, 5499, 1104, 1950, 1037, 11446, 781, 9541, 8255, 15, 7936, 3658, 910, 10853, 1645}
	want := []int16{11496, 8750, 6367, 8513, 9698, 2801, 11184, 7720, 3044, 6551, 12169, 6495, 2608, 10601, 3965, 2608, 6931, 5266, 5015, 11190, 11904, 11241, 2735, 6906, 7831, 6600, 4500, 9359, 4245, 5436, 8774, 2589, 4561, 8983, 696, 8332, 4550, 1996, 2855, 7575, 2429, 2784, 869, 12283, 7148, 11327, 8000, 2406, 9422, 7003, 9693, 10658, 1286, 7617, 240, 1465, 4821, 9727, 6893, 10912, 4320, 10947, 11575, 5020, 1246, 9103, 12228, 982, 1652, 5442, 5066, 1984, 5969, 10958, 11600, 6828, 10785, 9074, 11562, 8427, 7384, 10225, 3146, 9884, 227, 10528, 6914, 7012, 11418, 618, 2344, 2442, 12118, 1590, 4659, 9, 6054, 2974, 1062, 7889, 7428, 11552, 10955, 3953, 11650, 5488, 3360, 6419, 2018, 7855, 11937, 10273, 11760, 10619, 2946, 9827, 1391, 5288, 10081, 7879, 436, 2821, 10976, 4719, 3805, 9319, 9630, 2921, 4919, 11006, 8476, 822, 3362, 6488, 3539, 2966, 9066, 11199, 3581, 6766, 9874, 5432, 8230, 1904, 10886, 9536, 650, 3017, 8013, 3273, 11999, 10043, 9288, 8661, 3001, 9709, 1944, 7455, 3436, 5174, 887, 5047, 7710, 10546, 5349, 11586, 10870, 6055, 587, 5456, 2913, 7852, 4569, 89, 11242, 6656, 7772, 5474, 11556, 1074, 5017, 8253, 6103, 11848, 4716, 6126, 4405, 5651, 6845, 369, 11740, 7603, 7746, 7584, 915, 6450, 9542, 10494, 256, 9124, 4106, 8698, 7618, 1531, 11543, 9513, 1711, 1120, 6401, 11319, 947, 7814, 4649, 7342, 10521, 1379, 7114, 4336, 6053, 6221, 1914, 3752, 8195, 10946, 5208, 1259, 11370, 6416, 5131, 5381, 8682, 7596, 8281, 2484, 11339, 11788, 7058, 5553, 2273, 6449, 608, 11847, 4196, 2901, 12045, 6603, 3256, 9934, 7986, 8114, 11513, 907, 8637, 6623, 4668, 4038, 11237, 5537, 4283, 6388, 6134, 8930, 2128, 2128, 2963, 7004, 8973, 7762, 171, 10591, 7196, 745, 2586, 2633, 10421, 8891, 3400, 4224, 2007, 4723, 10362, 2104, 8976, 722, 11441, 2652, 6325, 6241, 2988, 11748, 7855, 9040, 7088, 9407, 9770, 867, 2077, 4362, 12110, 1082, 1850, 4862, 4330, 10985, 5379, 10483, 7677, 2619, 2355, 3252, 2103, 6398, 11488, 3782, 3245, 9556, 5907, 4738, 8334, 8587, 6139, 5343, 6495, 8498, 7104, 10335, 8532, 10159, 8308, 9264, 10616, 12269, 4354, 1430, 4838, 1508, 10559, 2651, 6956, 11497, 8752, 1131, 2791, 4011, 4253, 3438, 9498, 5714, 10445, 10070, 5480, 5019, 6473, 7725, 1261, 3066, 198, 7815, 2246, 3496, 8064, 739, 5866, 5569, 11456, 2244, 668, 8395, 5445, 2772, 4408, 9293, 11014, 761, 3718, 11571, 3404, 368, 3579, 10321, 6736, 11875, 10187, 529, 280, 2368, 2568, 4932, 6205, 7260, 7792, 7205, 11919, 1381, 11963, 3502, 11363, 7457, 9950, 4892, 10373, 5957, 10007, 711, 11549, 2571, 8529, 8934, 5748, 4109, 6209, 5302, 5566, 1970, 3825, 7545, 351, 11519, 7545, 2503, 3567, 1449, 2813, 4183, 7617, 12054, 6684, 8500, 1397, 2228, 4403, 10069, 7801, 4417, 9204, 1364, 3084, 3708, 8282, 9585, 5338, 10093, 4234, 6005, 8209, 1525, 3841, 5204, 2613, 2267, 3108, 8948, 8153, 7531, 7324, 9187, 2570, 684, 4422, 5060, 8768, 11619, 3214, 707, 7175, 5379, 169, 4774, 6508, 6510, 3021, 11514, 179, 4509, 3931, 3453, 7772, 4992, 4043, 12029, 8039, 9766, 8752, 5730, 5298, 2055, 8370, 9754, 2872, 731, 9288, 2970, 315, 5281, 10632, 4920, 609, 5117, 4981, 3040, 9677, 1530, 695, 10176, 5260, 3336, 2120, 6452, 6772, 3911, 5640, 4868}
	got := INTT(fINTT)
	if !reflect.DeepEqual(got, want) {
		t.Errorf("INTT() = %v, want %v", got, want)
	}
}

// func TestMulZq(t *testing.T) {
// 	for i := 0; i < iterations; i++ {
// 		f := make([]int16, n)
// 		g := make([]int16, n)

// 		for i := 0; i < n; i++ {
// 			f[i] = randInt16(0, util.Q-1)
// 			g[i] = randInt16(0, util.Q-1)
// 		}
// 	}
// }

func TestMulZq(t *testing.T) {
	var f = []int16{8173, 9288, 1590, 10128, 3084, 11944, 3606, 10686, 1970, 5869, 9412, 140, 11666, 2063, 10469, 9482, 5393, 3486, 279, 9752, 7504, 1934, 4105, 641, 11007, 2434, 9924, 5108, 280, 3916, 12015, 7646, 10652, 248, 2954, 10166, 9840, 6328, 8722, 8720, 10009, 994, 10537, 3421, 3761, 11383, 8013, 11461, 3771, 5797, 6249, 5616, 6687, 9604, 7471, 3691, 5776, 5559, 11620, 11819, 4386, 892, 5073, 9515}
	var g = []int16{10799, 6047, 4981, 12251, 3728, 271, 10710, 2031, 1507, 11686, 7495, 5929, 10484, 657, 118, 312, 697, 10761, 4697, 8764, 5858, 1422, 3398, 106, 2720, 7658, 11637, 614, 5677, 605, 2383, 1344, 10035, 12069, 4676, 1060, 8957, 8276, 7946, 9156, 10292, 6859, 9726, 7405, 6724, 6479, 4142, 3929, 10225, 4815, 982, 5536, 2312, 5176, 6962, 4888, 4932, 6558, 11804, 8035, 3279, 10832, 244, 3188}
	var want = []int16{8830, 5637, 956, 5582, 228, 10121, 8668, 5598, 6720, 8223, 3172, 5855, 313, 276, 4711, 9208, 8306, 9632, 6807, 7926, 6697, 11265, 5252, 10179, 9448, 6155, 5237, 7870, 11273, 4691, 4263, 10665, 10911, 5101, 5412, 1766, 10254, 6255, 6518, 11467, 10913, 5024, 3669, 7762, 5661, 3878, 5243, 2454, 1903, 11724, 10208, 4252, 5305, 38, 7318, 8396, 4810, 7170, 9086, 8240, 1744, 927, 5886, 11965}

	got := MulZq(f, g)
	if !reflect.DeepEqual(got, want) {
		t.Errorf("MulZq = %v, want %v", got, want)
	}
}

func randInt16(min int32, max int32) int16 {
	rand.Seed(time.Now().UnixNano())
	return int16(min + rand.Int31n(int32(max-min+1)))
}
